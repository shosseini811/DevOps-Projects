AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for OpenAI API ECS deployment'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name

  ContainerPort:
    Type: Number
    Default: 5000
    Description: Port the container exposes

  OpenAIAPISecret:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:051677741640:secret:dev/openai-api-key-WaXnhi
    Description: ARN of the OpenAI API Key secret in Secrets Manager

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIAPISecret

  TaskDefinition:
      Type: AWS::ECS::TaskDefinition    # AWS ECS Task Definition resource type
      Properties:
        Family: !Sub ${EnvironmentName}-openai-api    # Task definition family name (e.g., "dev-openai-api")
        Cpu: '256'      # 0.25 vCPU
        Memory: '512'   # 512 MB RAM
        NetworkMode: awsvpc    # Uses AWS VPC networking mode (required for Fargate)
        RequiresCompatibilities:
          - FARGATE    # Specifies this task runs on Fargate
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn    # IAM role for task execution

        ContainerDefinitions:    # Definition of containers in the task
          - Name: openai-api    # Container name
            Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/openai-api-app:latest    # ECR image
            PortMappings:
              - ContainerPort: !Ref ContainerPort    # Port exposed by container
            Environment:    # Environment variables
              - Name: PORT
                Value: !Ref ContainerPort
            Secrets:    # Sensitive environment variables from Secrets Manager
              - Name: OPENAI_API_KEY    # Will be available as OPENAI_API_KEY env var
                ValueFrom: !Ref OpenAIAPISecret    # References the secret we set up
            LogConfiguration:    # CloudWatch logs configuration
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-openai-api
      RetentionInDays: 30

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  # Security Groups
  LoadBalancerSecurityGroup:  # Name of the security group
    Type: AWS::EC2::SecurityGroup  # AWS Security Group resource type
    Properties:
      GroupDescription: Access to the load balancer  # Description of the security group
      VpcId: !Ref VPC  # Associates this security group with your VPC
      SecurityGroupIngress:  # Inbound rules
        - IpProtocol: tcp  # TCP protocol
          FromPort: 80     # Start port
          ToPort: 80      # End port
          CidrIp: 0.0.0.0/0  # Allow access from any IP address

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      
  # ECS Service
  Service:
      Type: AWS::ECS::Service    # AWS ECS Service resource type
      DependsOn: LoadBalancerListener    # Ensures the Listener exists before creating the service
      Properties:
        ServiceName: !Sub ${EnvironmentName}-openai-api    # Name of the service (e.g., "dev-openai-api")
        Cluster: !Ref ECSCluster    # Reference to the ECS cluster where this service runs
        TaskDefinition: !Ref TaskDefinition    # Reference to the task definition that defines the containers
        DesiredCount: 2    # Number of tasks (containers) to run - here it maintains 2 replicas
        LaunchType: FARGATE    # Uses AWS Fargate (serverless) instead of EC2 instances
        
        NetworkConfiguration:    # Network settings for the tasks
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED    # Tasks get public IPs
            Subnets:    # Tasks will be placed in these subnets
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:    # Security group for the tasks
              - !Ref ServiceSecurityGroup
        
        LoadBalancers:    # Load balancer configuration
          - ContainerName: openai-api    # Name of the container to route traffic to
            ContainerPort: !Ref ContainerPort    # Port on the container
            TargetGroupArn: !Ref TargetGroup    # Target group for load balancing

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
